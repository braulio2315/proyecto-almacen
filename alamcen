from guizero import App, Box, PushButton, Text, TextBox, ListBox, info, warn
import pickle

class Producto:
    def __init__(self, codigo, descripcion, precio, cantidad_stock, proveedor):
        self.codigo = codigo
        self.descripcion = descripcion
        self.precio = precio
        self.cantidad_stock = cantidad_stock
        self.proveedor = proveedor

class Inventario:
    def __init__(self):
        self.productos = []

    def cargar_productos(self):
        try:
            with open('productos.pkl', 'rb') as f:
                self.productos = pickle.load(f)
        except FileNotFoundError:
            pass

    def guardar_productos(self):
        with open('productos.pkl', 'wb') as f:
            pickle.dump(self.productos, f)

    def agregar_producto(self, producto):
        self.productos.append(producto)

    def buscar_producto(self, codigo):
        for producto in self.productos:
            if producto.codigo == codigo:
                return producto
        return None

    def actualizar_producto(self, codigo, nuevo_producto):
        for i, producto in enumerate(self.productos):
            if producto.codigo == codigo:
                self.productos[i] = nuevo_producto
                return True
        return False

    def eliminar_producto(self, codigo):
        for i, producto in enumerate(self.productos):
            if producto.codigo == codigo:
                del self.productos[i]
                return True
        return False

    def vender_producto(self, codigo, cantidad):
        for producto in self.productos:
            if producto.codigo == codigo:
                if producto.cantidad_stock >= cantidad:
                    producto.cantidad_stock -= cantidad
                    return True
                else:
                    return False
        return False

# Crear una instancia de Inventario
inventario = Inventario()
inventario.cargar_productos()

def mostrar_info_producto():
    codigo_seleccionado = lista_productos.value
    producto_seleccionado = inventario.buscar_producto(codigo_seleccionado)
    if producto_seleccionado:
        info("Información del Producto",
             f"Código: {producto_seleccionado.codigo}\n"
             f"Descripción: {producto_seleccionado.descripcion}\n"
             f"Precio: {producto_seleccionado.precio}\n"
             f"Cantidad en Stock: {producto_seleccionado.cantidad_stock}\n"
             f"Proveedor: {producto_seleccionado.proveedor}")
    else:
        info("Error", "Producto no encontrado.")

def agregar_producto():
    codigo_text = codigo.value
    descripcion_text = descripcion.value
    precio_text = precio.value
    cantidad_stock_text = cantidad_stock.value
    proveedor_text = proveedor.value

    if codigo_text and descripcion_text and precio_text and cantidad_stock_text and proveedor_text:
        try:
            precio_num = float(precio_text)
            cantidad_stock_num = int(cantidad_stock_text)
        except ValueError:
            warn("Error", "El precio y la cantidad deben ser números.")
            return

        nuevo_producto = Producto(codigo_text, descripcion_text, precio_num, cantidad_stock_num, proveedor_text)
        inventario.agregar_producto(nuevo_producto)
        actualizar_lista_productos()
        inventario.guardar_productos()  # Guardar productos al agregar uno nuevo
        info("Éxito", "Producto agregado correctamente.")
    else:
        warn("Error", "Todos los campos deben ser completados.")

def actualizar_producto():
    codigo_text = codigo.value
    nuevo_codigo_text = nuevo_codigo.value
    descripcion_text = descripcion.value
    precio_text = precio.value
    cantidad_stock_text = cantidad_stock.value
    proveedor_text = proveedor.value

    if nuevo_codigo_text and descripcion_text and precio_text and cantidad_stock_text and proveedor_text:
        try:
            precio_num = float(precio_text)
            cantidad_stock_num = int(cantidad_stock_text)
        except ValueError:
            warn("Error", "El precio y la cantidad deben ser números.")
            return

        nuevo_producto = Producto(nuevo_codigo_text, descripcion_text, precio_num, cantidad_stock_num, proveedor_text)
        if inventario.actualizar_producto(codigo_text, nuevo_producto):
            actualizar_lista_productos()
            inventario.guardar_productos()  # Guardar productos al actualizar uno existente
            info("Éxito", "Producto actualizado correctamente.")
        else:
            warn("Error", "Producto no encontrado.")
    else:
        warn("Error", "Todos los campos deben ser completados.")

def actualizar_lista_productos():
    lista_productos.clear()
    for producto in inventario.productos:
        lista_productos.append(producto.codigo)

def eliminar_producto():
    codigo_seleccionado = lista_productos.value
    if inventario.eliminar_producto(codigo_seleccionado):
        actualizar_lista_productos()
        inventario.guardar_productos()  # Guardar productos al eliminar uno
        info("Éxito", "Producto eliminado correctamente.")
    else:
        warn("Error", "Producto no encontrado.")

def vender_producto():
    codigo_seleccionado = lista_productos.value
    cantidad_venta = int(entrada_cantidad.value)
    
    if inventario.vender_producto(codigo_seleccionado, cantidad_venta):
        actualizar_lista_productos()
        inventario.guardar_productos()  # Guardar productos al vender uno
        info("Éxito", f"Se vendieron {cantidad_venta} unidades del producto {codigo_seleccionado}.")

        # Verificar si el stock es bajo y mostrar una alerta
        producto = inventario.buscar_producto(codigo_seleccionado)
        if producto.cantidad_stock <= 5:
            warn("Alerta", f"El stock del producto {codigo_seleccionado} es bajo. ¡Considera reponerlo!")
    else:
        warn("Error", "No hay suficiente stock para completar la venta.")

def confirmar_venta():
    cantidad_venta = int(entrada_cantidad.value)
    vender_producto()

def mostrar_cuadro_venta():
    box_venta.show()

def ocultar_cuadro_venta():
    box_venta.hide()

app = App("Sistema de Gestión de Inventario")

box = Box(app, layout="grid")

Text(box, text="Código", grid=[0,0])
codigo = TextBox(box, grid=[1,0])

Text(box, text="Nuevo Código", grid=[0,1])
nuevo_codigo = TextBox(box, grid=[1,1])

Text(box, text="Descripción", grid=[0,2])
descripcion = TextBox(box, grid=[1,2])

Text(box, text="Precio", grid=[0,3])
precio = TextBox(box, grid=[1,3])

Text(box, text="Cantidad en Stock", grid=[0,4])
cantidad_stock = TextBox(box, grid=[1,4])

Text(box, text="Proveedor", grid=[0,5])
proveedor = TextBox(box, grid=[1,5])

agregar_button = PushButton(box, text="Agregar Producto", command=agregar_producto, grid=[0,6])
actualizar_button = PushButton(box, text="Actualizar Producto", command=actualizar_producto, grid=[1,6])
eliminar_button = PushButton(box, text="Eliminar Producto", command=eliminar_producto, grid=[0,7])

lista_productos = ListBox(box, items=[], grid=[0,8,2,1])
ver_info_button = PushButton(box, text="Ver Información", command=mostrar_info_producto, grid=[0,9,2,1])
vender_button = PushButton(box, text="Vender Producto", command=mostrar_cuadro_venta, grid=[0,10,2,1])

box_venta = Box(app, layout="grid", visible=False)
Text(box_venta, text="Cantidad a vender", grid=[0,0])
entrada_cantidad = TextBox(box_venta, grid=[1,0])
confirmar_venta_button = PushButton(box_venta, text="Confirmar Venta", command=confirmar_venta, grid=[0,1])
cancelar_venta_button = PushButton(box_venta, text="Cancelar", command=ocultar_cuadro_venta, grid=[1,1])

actualizar_lista_productos()

app.display()
